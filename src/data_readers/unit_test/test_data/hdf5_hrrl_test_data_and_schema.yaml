////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2014-2022, Lawrence Livermore National Security, LLC.
// Produced at the Lawrence Livermore National Laboratory.
// Written by the LBANN Research Team (B. Van Essen, et al.) listed in
// the CONTRIBUTORS file. <lbann-dev@llnl.gov>
//
// LLNL-CODE-697807.
// All rights reserved.
//
// This file is part of LBANN: Livermore Big Artificial Neural Network
// Toolkit. For details, see http://software.llnl.gov/LBANN or
// https://github.com/LLNL/LBANN.
//
// Licensed under the Apache License, Version 2.0 (the "Licensee"); you
// may not use this file except in compliance with the License.  You may
// obtain a copy of the License at:
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the license.
////////////////////////////////////////////////////////////////////////////////

// It feels like we should be able to pack this node, but with the additional
// level of hierarchy in the sample name, it fails
const std::string hdf5_hrrl_data_sample =R"FOO(RUN_ID:
  000000334:
    Epmax: 15.2486634101312
    Etot: 0.0426354341969429
    Image: [456.288777930614, 231.340700217946, 113.528447010204, 115.115911382861, 116.716861149023, 118.331222098325, 120.52874207647, 122.175220756304, 123.834871115725, 125.507597035081, 126.011234474661, 123.587537036166]
    N: 64037572840.4818
    T: 5.34505173275895
    alpha: 32.6826031770453
)FOO";

// Use this version of the sample for the packing test
const std::string hdf5_hrrl_data_sample_id =R"FOO(000000334:
    Epmax: 15.2486634101312
    Etot: 0.0426354341969429
    Image: [456.288777930614, 231.340700217946, 113.528447010204, 115.115911382861, 116.716861149023, 118.331222098325, 120.52874207647, 122.175220756304, 123.834871115725, 125.507597035081, 126.011234474661, 123.587537036166]
    N: 64037572840.4818
    T: 5.34505173275895
    alpha: 32.6826031770453
)FOO";

// Here is how the HRRL data expects its sample to be packed for this experiment schema
const std::string packed_hdf5_hrrl_data_sample_id =R"FOO(000000334:
    samples: [456.288777930614, 231.340700217946, 113.528447010204, 115.115911382861, 116.716861149023, 118.331222098325, 120.52874207647, 122.175220756304, 123.834871115725, 125.507597035081, 126.011234474661, 123.587537036166]
    responses: [15.2486634101312, 0.0426354341969429, 64037572840.4818, 5.34505173275895, 32.6826031770453]
)FOO";

const std::string hdf5_hrrl_data_schema_test = R"AurthurDent(
# Re, the "ordering" fields: ordering is relative and need not be unique;
# it specifies, e.g, the order in which a set of scalars
# would be appended to a vector.
#
# metadata values in the below schema can be over-ridden by values in
# the experiment_schema.yaml
#
# For reference: the metadata nodes may contain additional info,
# e.g, scale and bias for normalization.
#
# The intent is that the the schema and metadata values below should
# be reasonably static, while the experiment_schema species the
# subset of values to use in an experiment
#
#
Image:
  metadata:
    dims: [4,3]
    channels: 1
    ordering: 0
    scale: [1.5259021896696422e-05]
    bias: [-1.5259021896696422e-05]
Epmax:
  metadata:
    ordering: 10
    scale: 0.1
    bias: -1.0
Etot:
  metadata:
    ordering: 20
    scale: 0.3916485873519399
    bias: -0.00039973613068075743
T:
  metadata:
    ordering: 50
    scale: 0.125
    bias: -0.25
alpha:
  metadata:
    ordering: 60
    scale: 0.1
    bias: -2.5

N:
  metadata:
    ordering: 40
    scale: 3.1662826662374707e-13
    bias: -0.001001267234978943
Xshift:
  metadata:
    ordering: 70
Yshift:
  metadata:
    ordering: 80
)AurthurDent";
